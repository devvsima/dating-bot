from aiogram import F, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

import app.filters.create_profile_filtres as filters
from app.handlers.dating.profile import profile_command
from app.keyboards.default.registration_form import RegistrationFormKb
from app.routers import dating_router
from app.states.default import ProfileEdit
from app.text import message_text as mt
from database.models import UserModel
from database.models.profile_media import MediaTypes
from database.services.profile_media import ProfileMedia


@dating_router.message(StateFilter(None), F.text == "üñº")
async def _edit_profile_photo_command(
    message: types.Message, state: FSMContext, user: UserModel
) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(ProfileEdit.photo)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        photos=[],
        photo_count=0,
    )

    kb = RegistrationFormKb.photo(user)
    await message.answer(text=mt.PHOTO_EDIT_START, reply_markup=kb)


@dating_router.message(StateFilter(ProfileEdit.photo), filters.IsPhoto())
async def _update_photo(
    message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    data = await state.get_data()
    photos = data.get("photos", [])

    if message.text in filters.LEAVE_PREVIOUS_OPTIONS:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ñ–æ—Ç–æ - –∑–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await state.clear()
        await message.answer(mt.PHOTO_UNCHANGED)
        await profile_command(message, user, session)
        return

    elif message.text == mt.PHOTO_SAVE_FINISH_BUTTON:
        if not photos:
            await message.answer(mt.PHOTO_NO_UPLOADED)
            return

        try:
            await ProfileMedia.delete_profile_photos(session, user.id)
            for i, photo_file_id in enumerate(photos, 1):
                await ProfileMedia.add_media(
                    session=session,
                    profile_id=user.id,
                    media_url=photo_file_id,
                    media_type=MediaTypes.Photo,
                    order=i,
                )

            await state.clear()

            await message.answer(mt.PHOTO_SAVED(len(photos)))
            await profile_command(message, user, session)

        except Exception as e:
            await session.rollback()
            await message.answer(mt.PHOTO_SAVE_ERROR)
            print(f"Error saving photos: {e}")

        return

    elif message.photo:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if len(photos) >= 3:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ! –í–∞—à–∏ —Ñ–æ—Ç–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫
        new_photo = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photos.append(new_photo)

        await state.update_data(photos=photos)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_count = len(photos)
        remaining = 3 - new_count

        if remaining > 0:
            await message.answer(
                text=mt.PHOTO_PROGRESS(new_count), reply_markup=RegistrationFormKb.photo_add()
            )
        else:
            # –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ 3 —Ñ–æ—Ç–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            try:
                await ProfileMedia.delete_profile_photos(session, user.id)
                for i, photo_file_id in enumerate(photos, 1):
                    await ProfileMedia.add_media(
                        session=session,
                        profile_id=user.id,
                        media_url=photo_file_id,
                        media_type=MediaTypes.Photo,
                        order=i,
                    )

                await state.clear()

                await message.answer(mt.PHOTO_ALL_UPLOADED())
                await profile_command(message, user, session)

            except Exception as e:
                await session.rollback()
                await message.answer(mt.PHOTO_SAVE_ERROR)
                print(f"Error saving photos: {e}")
