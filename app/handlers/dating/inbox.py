import html

from aiogram import F, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.business.dating_service import send_user_like_alert
from app.business.profile_service import complaint_to_profile, send_profile_with_dist
from app.constans import EFFECTS_DICTIONARY
from app.handlers.common.start import start_command
from app.keyboards.default.base import match_kb
from app.keyboards.default.compleint import compleint_kb
from app.routers import dating_router
from app.states.default import LikeResponse
from app.text import message_text as mt
from database.models import UserModel
from database.models.match import MatchModel, MatchStatus
from database.services import Match, Profile, User
from loader import bot


async def _send_mutual_like_notifications(session: AsyncSession, user: UserModel) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–∞—Ö –¥–ª—è –º–∞—Ç—á–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º Accepted,
    –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ö–æ–¥—è—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    effect_id = EFFECTS_DICTIONARY["üéâ"]

    # –ù–∞–π—Ç–∏ –≤—Å–µ –º–∞—Ç—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º Accepted, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
    result = await session.execute(
        select(MatchModel)
        .where(MatchModel.sender_id == user.id)
        .where(MatchModel.status == MatchStatus.Accepted)
        .where(MatchModel.is_active == True)
    )
    accepted_matches = result.scalars().all()
    for match in accepted_matches:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            receiver = await User.get_with_profile(session, match.receiver_id)
            await send_profile_with_dist(session=session, user=user, profile=receiver.profile)
            if receiver and receiver.profile:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –∏ —Ç–µ–∫—Å—Ç
                link = generate_user_link(id=receiver.id, username=receiver.username)
                text = mt.LIKE_ACCEPT(user.language).format(
                    link, html.escape(receiver.profile.name)
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=user.id, text=text, message_effect_id=effect_id, parse_mode="HTML"
                )

                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞—Ç—á, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                await Match.update(session=session, id=match.id, is_active=False)

        except Exception as e:
            pass


@dating_router.message(StateFilter(None), F.text == "üì≠")
async def match_archive(
    message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession
) -> None:
    """–ê—Ä—Ö–∏–≤ –ª–∞–π–∫–æ–≤ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è"""
    await state.set_state(LikeResponse.response)
    await User.update(
        session,
        id=user.id,
        username=message.from_user.username,
    )  # needs to be redone

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–∞—Ö
    await _send_mutual_like_notifications(session, user)

    if liker_ids := await Match.get_user_matchs(session, message.from_user.id):
        text = mt.ARCHIVE_SEARCH(user.language).format(len(liker_ids))
        await message.answer(text=text, reply_markup=match_kb)

        await state.update_data(ids=liker_ids)
        profile = await Profile.get(session, liker_ids[0])
        match_data = await Match.get(session, user.id, profile.id)
        await send_profile_with_dist(user=user, profile=profile, session=session)
        if match_data and match_data.message:
            await message.answer(mt.MESSAGE_TO_YOU(user.language).format(match_data.message))
    else:
        await message.answer(mt.LIKE_ARCHIVE(user.language))
        await start_command(message=message, user=user, state=state)


@dating_router.callback_query(StateFilter("*"), F.data == "archive")
async def _match_atchive_callback(
    callback: types.CallbackQuery, state: FSMContext, user: UserModel, session: AsyncSession
) -> None:
    """–ê—Ä—Ö–∏–≤ –ª–∞–π–∫–æ–≤ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è"""
    await state.set_state(LikeResponse.response)
    await User.update(
        session,
        id=user.id,
        username=callback.from_user.username,
    )  # needs to be redone
    await callback.message.answer(text=mt.SEARCH(user.language), reply_markup=match_kb)
    await callback.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–∞—Ö
    await _send_mutual_like_notifications(session, user)

    if liker_ids := await Match.get_user_matchs(session, callback.from_user.id):
        await state.update_data(ids=liker_ids)
        profile = await Profile.get(session, liker_ids[0])
        match_data = await Match.get(session, user.id, profile.id)
        await send_profile_with_dist(user=user, profile=profile, session=session)
        if match_data and match_data.message:
            await callback.message.answer(
                mt.MESSAGE_TO_YOU(user.language).format(match_data.message)
            )
    else:
        # from app.keyboards.default.base import menu_kb

        await callback.message.answer(mt.LIKE_ARCHIVE(user.language))
        # await state.clear()
        # await callback.message.answer(
        #     mt.MENU,
        #     reply_markup=menu_kb,
        # )
        await start_command(message=callback.message, user=user, state=state)


@dating_router.message(
    StateFilter(LikeResponse.response), F.text.in_(("‚ù§Ô∏è", "üëé", "üí¢", "‚Ü©Ô∏è", "üîû", "üí∞", "üî´"))
)
async def _match_response(
    message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession
) -> None:
    """'–°–≤–∞–π–ø—ã' –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    ids = data.get("ids")

    another_user = await User.get_with_profile(session, ids[0])
    match_data = await Match.get(session, user.id, another_user.id)

    if message.text == "‚ù§Ô∏è":
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ª–∞–π–∫"""
        await like_accept(session=session, user=user, another_user=another_user, match=match_data)
        # """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –ª–∞–π–∫"""
        # link = generate_user_link(id=user.id, username=user.username)
        # text = mt.LIKE_ACCEPT_ALERT(user.language).format(link, html.escape(user.profile.name))
        # try:
        #     await bot.send_message(chat_id=another_user.id, text=text, message_effect_id=effect_id)
        # except:
        #     ...
    elif message.text == "üëé":
        pass
        await Match.update(
            session=session, id=match_data.id, status=MatchStatus.Rejected, is_active=False
        )

    elif message.text == "üí¢":
        await message.answer(mt.COMPLAINT, reply_markup=compleint_kb())
        return
    elif message.text in ("üîû", "üí∞", "üî´"):
        await message.answer(mt.REPORT_TO_PROFILE, reply_markup=match_kb)
        await complaint_to_profile(
            session=session,
            sender=user,
            receiver=another_user,
            reason=message.text,
        )
    elif message.text == "‚Ü©Ô∏è":
        await message.answer(mt.SEARCH(user.language), reply_markup=match_kb)
    # await Match.delete(session, user.id, another_user.id)

    ids.pop(0)
    await state.update_data(ids=ids)
    if ids:
        profile = await Profile.get(session, ids[0])
        match_data = await Match.get(session, user.id, profile.id)
        await send_profile_with_dist(user=user, profile=profile, session=session)
        if match_data and match_data.message:
            await message.answer(mt.MESSAGE_TO_YOU(user.language).format(match_data.message))
    else:
        await message.answer(mt.EMPTY_PROFILE_SEARCH(user.language))
        await start_command(message=message, user=user, state=state)


def generate_user_link(id: int, username: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username, —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ https://t.me/username,
    –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tg://user?id=id.
    """
    if username:
        return f"https://t.me/{username}"
    return f"tg://user?id={id}"


async def like_accept(
    session: AsyncSession, user: UserModel, another_user: UserModel, match: MatchModel
):
    effect_id = EFFECTS_DICTIONARY["üéâ"]
    if match.status == MatchStatus.Accepted:
        # –ï—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –≤–∑–∏–º–Ω—ã–π –ª–∞–π–∫ –∏ –∑–∞—à–µ–ª –≤ inbox
        sender = user
        reciver = another_user
        await Match.update(session=session, id=match.id, is_active=False)

        link = generate_user_link(id=reciver.id, username=reciver.username)
        text = mt.LIKE_ACCEPT(sender.language).format(link, html.escape(reciver.profile.name))
        try:
            await bot.send_message(
                chat_id=sender.id, text=text, message_effect_id=effect_id, parse_mode="HTML"
            )
        except:
            ...

    else:
        # –ï—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ —ç—Ç–æ—Ç –∂–µ —á–µ–ª–æ–≤–µ–∫
        sender = another_user
        reciver = user
        await Match.update(session=session, id=match.id, status=MatchStatus.Accepted)
        await send_user_like_alert(session, sender)

        link = generate_user_link(id=sender.id, username=sender.username)
        text = mt.LIKE_ACCEPT(reciver.language).format(link, html.escape(sender.profile.name))
        try:
            await bot.send_message(
                chat_id=reciver.id, text=text, message_effect_id=effect_id, parse_mode="HTML"
            )
        except:
            ...
