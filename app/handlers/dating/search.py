from aiogram import F, types
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

import app.filters.create_profile_filtres as filters
from app.business.dating_service import send_user_like_alert
from app.business.menu_service import menu
from app.business.profile_service import complaint_to_profile, send_profile_with_dist
from app.handlers.common.start import start_command
from app.keyboards.default.base import return_to_menu_kb, search_kb
from app.keyboards.default.report import report_kb
from app.routers import dating_router
from app.states.default import Search
from app.text import message_text as mt
from database.models import UserModel
from database.services import Match, Profile, User
from database.services.search import search_profiles


@dating_router.message(StateFilter(None), F.text == "üîç")
async def _search_command(
    message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession
) -> None:
    """–ë–æ—Ç –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∞–Ω–∫–µ—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö"""
    await message.answer(mt.SEARCH, reply_markup=search_kb)

    if profile_list := await search_profiles(session, user.profile):
        await state.set_state(Search.search)
        await state.update_data(ids=profile_list)

        another_profile = await Profile.get(session, profile_list[0])
        await send_profile_with_dist(user=user, profile=another_profile, session=session)

    else:
        await message.answer(mt.INVALID_PROFILE_SEARCH)
        await menu(message.from_user.id)


@dating_router.message(
    StateFilter(Search.search),
    F.text.in_(("‚ù§Ô∏è", "üëé", "üí¢", "üì©")),
)
async def _search_profile(
    message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession
) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –∞–Ω–∫–µ—Ç–∞–º–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –±–æ—Ç–æ–º,
    —Å—Ç–∞–≤—è –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫.
    –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∂–∞–ª–æ–±—ã –Ω–∞ –∞–Ω–∫–µ—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.
    –í—Å–µ –∂–∞–ª–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
    """
    data = await state.get_data()
    profile_list = data.get("ids", [])
    another_user = await User.get_with_profile(session, profile_list[0])

    if message.text == "‚ù§Ô∏è":
        await like_profile(
            session=session,
            message=message,
            another_user=another_user,
        )
    elif message.text == "üëé":
        pass
    elif message.text == "üì©":
        await state.set_state(Search.message)
        await message.answer(mt.MAILING_TO_USER, reply_markup=return_to_menu_kb)
        return

    if message.text == "üí¢":
        await message.answer(mt.COMPLAINT, reply_markup=report_kb())
        return
    await next_profile(session, message, profile_list, user, state)


@dating_router.message(StateFilter(Search.search), F.text.in_(("üîû", "üí∞", "üî´", "‚Ü©Ô∏è")))
async def _search_profile_report(
    message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession
) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –∞–Ω–∫–µ—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."""
    data = await state.get_data()
    profile_list = data.get("ids", [])
    another_user = await User.get_with_profile(session, profile_list[0])

    if message.text in ("üîû", "üí∞", "üî´"):
        await message.answer(mt.REPORT_TO_PROFILE, reply_markup=search_kb)
        await complaint_to_profile(
            complainant=user,
            reason=message.text,
            complaint_user=another_user,
            session=session,
        )
    elif message.text == "‚Ü©Ô∏è":
        await message.answer(mt.SEARCH, reply_markup=search_kb)
    await next_profile(session, message, profile_list, user, state)


@dating_router.message(StateFilter(Search.message), F.text, filters.IsMessageToUser())
async def _search_profile_mailing_(
    message: types.Message, state: FSMContext, user: UserModel, session: AsyncSession
) -> None:
    """–õ–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–∫–µ—Ç—É"""
    data = await state.get_data()
    profile_list = data.get("ids", [])
    another_user = await User.get_with_profile(session, profile_list[0])
    await state.set_state(Search.search)

    if message.text == "‚Ü©Ô∏è":
        await message.answer(mt.CANNCELED_LETTER, reply_markup=search_kb)
        await send_profile_with_dist(user=user, profile=another_user.profile, session=session)

        return
    await like_profile(
        session=session,
        message=message,
        another_user=another_user,
        mail_text=message.text,
    )
    await message.answer(mt.MAILING_LIKE, reply_markup=search_kb)
    await next_profile(session, message, profile_list, user, state)


@dating_router.message(StateFilter(Search.message))
async def _search_profile_mailing_error(message: types.Message) -> None:
    """–õ–æ–≤–∏—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ —à–∞–±–ª–æ–Ω—É"""
    await message.answer(mt.INVALID_MAILING_TO_USER)


async def next_profile(
    session: AsyncSession,
    message: types.Message,
    profile_list: UserModel,
    user: UserModel,
    state: FSMContext,
):
    profile_list.pop(0)
    if profile_list:
        profile = await Profile.get(session, profile_list[0])
        await state.update_data(ids=profile_list)
        await send_profile_with_dist(user=user, profile=profile, session=session)
    else:
        await message.answer(mt.EMPTY_PROFILE_SEARCH)
        await start_command(message, state, user)


async def like_profile(
    session: AsyncSession,
    message: types.Message,
    another_user: UserModel,
    mail_text: str | None = None,
):
    is_create = await Match.create(session, message.from_user.id, another_user.id, mail_text)

    if is_create:
        matchs_count = len(await Match.get_user_matchs(session, message.from_user.id))
        if matchs_count == 1 or matchs_count % 3 == 0:
            await send_user_like_alert(session, another_user)
