import re

from aiogram.types import InputMediaPhoto

from app.handlers.message_text import user_message_text as umt
from app.keyboards.default.base import menu_kb
from app.keyboards.inline.admin import block_user_ikb
from app.keyboards.inline.archive import check_archive_ikb
from data.config import MODERATOR_GROUP
from database.models import ProfileModel, UserModel
from database.services.match import Match
from database.services.search import haversine_distance
from loader import bot
from utils.logging import logger

effect_dict_id = {
    "üî•": "5104841245755180586",
    "üëç": "5107584321108051014",
    "üëé": "5104858069142078462",
    "üéâ": "5046509860389126442",
    "üí©": "5046589136895476101",
}


def check_args_type(type: type, data_list: str) -> list | bool:
    try:
        return list(map(type, re.split(r"[ ,]+", data_list)))
    except:
        return False


async def menu(chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await bot.send_message(
        chat_id=chat_id,
        text=umt.MENU,
        reply_markup=menu_kb,
    )


async def complaint_to_profile(
    complainant: UserModel, reason: str, complaint_profile: ProfileModel
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –≥—Ä—É–ø–ø—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–∞ –∂–∞–ª–æ–±–∞"""
    if MODERATOR_GROUP:
        try:
            await send_profile(MODERATOR_GROUP, complaint_profile)

            text = umt.REPORT_TO_USER.format(
                complainant.id,
                complainant.username,
                complaint_profile.id,
                complaint_profile.username,
                reason,
            )

            await bot.send_message(
                chat_id=MODERATOR_GROUP,
                text=text,
                reply_markup=block_user_ikb(
                    id=complaint_profile.id,
                    username=complaint_profile.username,
                ),
            )
        except:
            logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –≥—Ä—É–ø–ø—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ")


async def send_profile(chat_id: int, profile: ProfileModel) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""

    text = f"{profile.name}, {profile.age}, {profile.city}\n{profile.description}"
    media = [
        InputMediaPhoto(
            media=photo.photo,
            caption=text if i == 0 else None,
            parse_mode=None,
        )
        for i, photo in enumerate(profile.photos)
    ]
    await bot.send_media_group(chat_id=chat_id, media=media)


async def send_profile_with_dist(user: UserModel, profile: ProfileModel) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –¥–æ –Ω–µ–≥–æ –≤ –∫–∏–ª–æ–º—Ç–µ—Ä–∞—Ö"""
    if profile.city == "üìç":
        distance = haversine_distance(
            user.profile.latitude, user.profile.longitude, profile.latitude, profile.longitude
        )
        city = f"üìç {round(distance, 2)} km"
    else:
        city = profile.city
    text = f"{profile.name}, {profile.age}, {city}\n{profile.description}"

    media = [
        InputMediaPhoto(
            media=photo.photo,
            caption=text if i == 0 else None,
            parse_mode=None,
        )
        for i, photo in enumerate(profile.photos)
    ]
    await bot.send_media_group(chat_id=user.id, media=media)


async def new_user_alert_to_group(user: UserModel) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if MODERATOR_GROUP:
        try:
            await bot.send_message(
                chat_id=MODERATOR_GROUP,
                text="New user!\n<code>{}</code> (@{})".format(user.id, user.username),
            )
        except:
            logger.error("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –≥—Ä—É–ø–ø—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ")


def generate_user_link(id: int, username: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username, —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ https://t.me/username,
    –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tg://user?id=id.
    """
    if username:
        return f"https://t.me/{username}"
    return f"tg://user?id={id}"


async def send_message_with_effect(
    chat_id: int, text: str, effect_id: str = effect_dict_id["üéâ"]
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            message_effect_id=effect_id,
        )
    except:
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞"
        )


async def send_user_like_alert(session, user: UserModel):
    matchs = await Match.get_user_matchs(session, user.id)
    try:
        await bot.send_message(
            chat_id=user.id,
            text=umt.LIKE_PROFILE(user.language).format(len(matchs)),
            reply_markup=check_archive_ikb(user.language),
        )
    except:
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} @{user.username}:\
            –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–Ω–Ω–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑ –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞–∫–∏ –±–æ—Ç–∞"
        )
